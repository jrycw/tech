---
title: "Three Approaches to Styling the Table Body in Great Tables"
html-table-processing: none
date: "2025-01-24"
categories: [python, gt]
jupyter: python3
image: "table_body.png"
---

This post demonstrates three approaches to styling the table body:

* **Using a for-loop:** Repeatedly call `GT.tab_style()` for each column.
* **Utilizing the `locations=` parameter in `GT.tab_style()`:** Pass a list of `loc.body()` objects.
* **Leveraging the `mask=` parameter in `loc.body()`:** Use Polars expressions for streamlined styling.

Letâ€™s dive in.

### Preparations
We'll use the built-in dataset `gtcars` to create a Polars DataFrame. Next, we'll select the columns `mfr`, `drivetrain`, `year`, and `hp` to create a small pivoted table named `df_mini`. Finally, we'll pass `df_mini` to the `GT` object to create a table named `gt`, using `drivetrain` as the `rowname_col` and `mfr` as the `groupname_col`, as shown below:
```{python}
# | code-fold: true
import polars as pl
from great_tables import GT, loc, style
from great_tables.data import gtcars
from polars import selectors as cs

year_cols = ["2014", "2015", "2016", "2017"]
df_mini = (
    pl.from_pandas(gtcars)
    .filter(pl.col("mfr").is_in(["Ferrari", "Lamborghini", "BMW"]))
    .sort("drivetrain")
    .pivot(on="year", index=["mfr", "drivetrain"], values="hp", aggregate_function="mean")
    .select(["mfr", "drivetrain", *year_cols])
)

gt = GT(df_mini).tab_stub(rowname_col="drivetrain", groupname_col="mfr").opt_stylize()
gt
```

The numbers in the cells represent the average horsepower for each combination of `mfr` and `drivetrain` for a specific year.

In the following section, we'll demonstrate three different ways to highlight the cell text in red if the average horsepower exceeds 650.

### Using a for-loop: Repeatedly call `GT.tab_style()` for each column
The most intuitive way is to call `GT.tab_style()` for each column. Here's how:
```{python}
gt1 = gt # <1>
for col in year_cols:
    gt1 = gt1.tab_style(
        style=style.text(color="red"),
        locations=loc.body(columns=col, rows=pl.col(col).gt(650))
    )
gt1
```
1. Since we want to keep `gt` intact for later use, we will modify `gt1` in this approach instead.


### Utilizing the `locations=` parameter in `GT.tab_style()`: Pass a list of `loc.body()` objects
A more concise method is to pass a list of `loc.body()` objects to the `locations=` parameter in `GT.tab_style()`, as shown below:
```{python}
(
    gt.tab_style(
        style=style.text(color="red"),
        locations=[
            loc.body(columns=col, rows=pl.col(col).gt(650))
            for col in year_cols
        ],
    )
)
```


### Leveraging the `mask=` parameter in `loc.body()`: Use Polars expressions for streamlined styling
The most modern approach (`0.16.0`) is to pass a Polars expression to the `mask=` parameter in `loc.body()`, as illustrated here:
```{python}
(
    gt.tab_style(
        style=style.text(color="red"),
        locations=loc.body(mask=cs.numeric().gt(650))
    )
)
```

In this example, `loc.body()` is smart enough to automatically target the rows where the cell value exceeds 650 for each numerical column. In general, you can think of `mask=` as a syntactic sugar that Great Tables provides to save you from having to manually loop through the columns.

## Final Words
This post summarizes three approaches to styling the table body. Among them, the `mask=` parameter in `loc.body()` is definitely my favorite, inspired by [#389](https://github.com/posit-dev/great-tables/issues/389) and implemented by me. 

Special thanks to [@rich-iannone](https://github.com/rich-iannone) and [@machow](https://github.com/machow) for their invaluable suggestions during development. Any remaining bugs are entirely on me.

::: {.callout-warning}
# Disclaimer
This post was drafted by me, with AI assistance to refine the content.
::: 